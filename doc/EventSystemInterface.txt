# First design

namespace Event
{
    enum Type
    {
        UNIT_DEATH,
        UNIT_SPAWN,
        UNIT_MOVE,
        UNIT_ATTACK,
        TURN_PASSED
    }

    struct Event
    {
        Event::Type type
        Event::Union event;
    }

    union Union
    {
        UnitDeath unitDeath;
        UnitSpawn unitSpawn;
        UnitMove unitMove;
        UnitAttack unitAttack;
        TurnPassed turnPassed;
    }

    namespace Unit
    {
        struct Death
        {
            Unit* unit;
            Unit* killer;
        }

        struct Move
        {
            Unit* unit;
            Vector2 origin;
            Vector2 dest;
            Map& map;
        }
    }
}

using EventListener = std::function<void(Event)>;

class Subject

public:

    void Register(EventType, EventListener);
    void Notify(Event);

private:
    map<EventType, vector<EventListener>> event_listeners;

# Second design

namespace Event
{

    enum Type
    {
        GAME,
        UNIT
    }

    enum UnitSubType
    {
        UNIT_DEATH,
        UNIT_SPAWN,
        UNIT_MOVE,
        UNIT_ATTACK
    }

    enum GameSubType
    {
        TURN_PASSED,
        PLAYER_REMOVED
    }

    union SubType
    {
        UnitSubType unitSubType;
        GameSubType gameSubType;
    }

    union Union
    {
        UnitDeath unitDeath;
        UnitSpawn unitSpawn;
    }

    struct Event
    {
        Event::Type type
        Event::SubType subtype;
        Event::Union event;
    }

    namespace Unit
    {
        struct Death
        {
            Unit* unit;
            Unit* killer;
        }

        struct Move
        {
            Unit* unit;
            Vector2 origin;
            Vector2 dest;
            Map& map;
        }
    }
}

using EventListener = std::function<void(Event)>;

class GameEvents

public:

    void Register(EventType, EventListener);

private:
    map<EventType, vector<EventListener>> event_listeners;

# Third design, no variant

template<typename T>
class Subject

public:

    void Register(std::function<void(T)> listener);
    void Notify(T event);

private:

    vector<std::function<void(T)> listeners;

class GameSubject

    Subject<TurnPassed> turnPassedTopic;
    Subject<PlayerRemoved> playerRemovedTopic;


gameSubject.turnPassedTopic.Register(...)
gameSubject.turnPassedTopic.Notify(turnPassed);


# Fourth Design, everything is an event
# In this design, theres a queue of events, where every change made to the state of the game is registered.
# Commands create events that are pushed to the queue, then those events are resolved.
# After an event is resolved, every entity is notified of that event.
# In this model, commands and events are almost interchangeable.

EventQueue q;

while(!q.Empty())
    Event e = q.Pop();
    e.Resolve()
    Notify(e);

# Problem: Now that commands and events are the same thing. How does the mine realize that the tank has walked over it
# if there's no Path information in the event?
# Well, once they are executed, commands can give that information. MoveCommand has a method to return a path, returns an empty vector if it wasn't executed.