name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Download Lua
      shell: bash
      run: curl -R -O http://www.lua.org/ftp/lua-5.4.2.tar.gz

    - name: Uncompress Lua
      shell: bash
      run: tar zxf lua-5.4.2.tar.gz

    - name: Compile Lua
      shell: bash
      run: cd lua-5.4.2; make; cd ..

    - name: Set Lua lib and include dir env vars
      shell: bash
      run: echo "LUA_INCLUDE_DIR=$(pwd)/lua-5.4.2/src/" >> $GITHUB_ENV; echo "LUA_LIB_PATH=$(pwd)/lua-5.4.2/src/liblua.a" >> $GITHUB_ENV

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLUA_INCLUDE_DIR=${{ env.LUA_INCLUDE_DIR }} -DLUA_LIB_PATH=${{ env.LUA_LIB_PATH }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --verbose

      # Sends a telegram notification
    - name: Send build notification
      if: ${{ failure() }}
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{github.ref}}/${{ github.event.head_commit.message }} tests failed.
